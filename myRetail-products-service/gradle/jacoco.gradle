//https://docs.gradle.org/current/userguide/jacoco_plugin.html
apply plugin: "jacoco"

jacoco {
    toolVersion = "0.8.5"
}

def excludesList = [
    'com/myretail/products/ProductsServiceApplication.class',
    'com/myretail/products/configurations/**',
    'com/myretail/products/domain/model/**',
    'com/myretail/products/data/model/**',
    'com/myretail/products/services/web/WebClientSevice.class'
    ]

//ignore reporting main, configuration and WebClient classes for POC
//since these classes don't have any business process implementation
//however WebClient should be unit tested. didn't find any better way
//mock reactive nature of this class. i can use builder instead of create
//to use mockito to mock this class. But, didn't like the way mockito mock
//reactive process. need to explore little bit more!
//TODO need to revisit in future
jacocoTestReport {
    group = "Reporting"
    description = "Generate Jacoco coverage reports after running tests."
    reports {
        html.enabled true
        csv.enabled false
        xml.enabled true
    }
    afterEvaluate {
        classDirectories = files(classDirectories.files.collect {
            fileTree(dir: it, excludes: excludesList)
        })
    }
}

jacocoTestCoverageVerification {
    
    afterEvaluate {
        classDirectories = files(classDirectories.files.collect {
            fileTree(dir: it, excludes: excludesList)
        })
    }
    
    violationRules {
        failOnViolation = false
        // total line coverage
        rule {
            limit {
                counter = 'LINE'
                minimum = 0.50
            }
        }
        // total branch coverage
           rule {
            
            limit {
                counter = 'BRANCH'
                minimum = 0.8
            }
        }
     }
}

// run coverage verification during the build
check.dependsOn jacocoTestCoverageVerification
test.finalizedBy jacocoTestReport